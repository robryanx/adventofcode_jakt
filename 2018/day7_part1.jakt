import reader
import utility

function sort_can_visit(can_visit: [String]) {
    utility::sort(values: can_visit, sorter: &function(anon item_a: String, anon item_b: String) -> i8 {
        if item_a > item_b {
            return -1
        } else if item_a < item_b {
            return 1
        } else {
            return 0
        }
    });
}

function remove_visited(mut dependancies: [String:[String]], visit: String) throws {
    for key in dependancies.keys().iterator() {
        if dependancies[key].contains(visit) {
            dependancies[key] = utility::array_remove(arr: dependancies[key], remove_str: visit)
        }
    }
}

function main() {
    mut dependancies: [String:[String]] = [:]

    for step_dependancy_str in reader::lines_string(day: 7).iterator() {
        let step_dependancy_parts = step_dependancy_str.split(' ')
        if not dependancies.contains(step_dependancy_parts[1]) {
            dependancies[step_dependancy_parts[1]] = []
        }
        if not dependancies.contains(step_dependancy_parts[7]) {
            dependancies[step_dependancy_parts[7]] = []
        }
        dependancies[step_dependancy_parts[7]].push(step_dependancy_parts[1])
    }

    mut visited: [String] = []
    mut can_visit: [String] = []

    loop {
        for key in dependancies.keys().iterator() {
            if dependancies[key].size() == 0 and not can_visit.contains(key) and not visited.contains(key) {
                can_visit.push(key)
            }
        }

        if can_visit.size() == 0 {
            break
        }

        sort_can_visit(can_visit)

        let visit = can_visit.pop()!
        visited.push(visit)

        remove_visited(dependancies, visit)
    }

    println("{}", utility::array_join(arr: visited))
}