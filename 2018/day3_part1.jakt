import reader
import utility

function parse_position(claim: String) throws -> (String, [i32]) {
    let claim_parts = claim.split(' ')
    let coords = claim_parts[2].split(',') 
    let dimensions = claim_parts[3].split('x')

    return (claim_parts[0], [
        coords[0].to_int()!
        coords[1].replace(replace: ":", with: "").to_int()!
        dimensions[0].to_int()!
        dimensions[1].to_int()!
    ])
}

function main() {
    mut contained = 0
    mut map: [i32:[i32:i32]] = [:]

    for claim in reader::lines_string(day: 3).iterator() {
        let (claim_id, position) = parse_position(claim)
        
        for x in position[0]..(position[0] + position[2]) {
            for y in position[1]..(position[1] + position[3]) {
                if not map.contains(x) {
                    map[x] = [:]
                }

                if map[x].contains(y) {
                    if map[x][y] == 1 {
                        map[x][y] = 2
                        contained++
                    }
                } else {
                    map[x][y] = 1
                }
            }
        }
    }

    println("{}", contained)
}