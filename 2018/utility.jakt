function string_to_char_array(anon str: String) throws -> [u8] {
    mut chars: [u8] = []
    for i in ..str.length() {
        chars.push(str.byte_at(i))
    }

    return chars
}

function char_array_to_string(anon char_arr: [u8]) throws -> String {
    mut sb = StringBuilder:: create()

    for i in ..char_arr.size() {
        sb.append(char_arr[i])
    }

    return sb.to_string()
}

function sort<T>(mut values: [T], sorter: function(anon item_a: T, anon item_b: T) -> i8) {
    mut i = 0uz
    while i < values.size() - 1 {
        mut j = 0uz
        while j < values.size() - i - 1 {
            if sorter(values[j], values[j + 1]) > 0 {
                let tmp = values[j]
                values[j] = values[j + 1]
                values[j + 1] = tmp
            }
            ++j
        }
        ++i
    }
}

function abs(anon number: i64) -> i64 {
    if number < 0 {
        return number * -1
    }

    return number
}

struct Enumerator<T> {
    index: usize
    iterator: ArrayIterator<T>

    function next(mut this) -> (usize, T)? {
        .index++

        let item: T? = .iterator.next()
        if item.has_value() {
            let ret: (usize, T) = (.index - 1, item!)
            return Some(ret)
        } else {
            return None
        }
    }
}
