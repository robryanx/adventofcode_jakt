import reader

function previous_char(chars: &[u8], current: usize) -> usize {
    if current > 0 {
        let previous = current - 1
        for i in previous..0 {
            if chars[i] != 0 {
                return i
            }
        }
    }    

    return 0
}

function next_char(chars: &[u8], current: usize) -> usize {
    let next = current + 1
    if next < chars.size() {
        for i in next..chars.size() {
            if chars[i] != 0 {
                return i
            }
        }
    }

    return 0
}

function count_chars(chars: &[u8]) -> i32 {
    mut count = 0i32
    for char_ in chars.iterator() {
        if char_ != 0 {
            count++
        }
    }

    return count
}

function main() {
    mut chars = reader::chars(day: 5)

    mut start = 0uz
    mut ended = false

    loop {
        mut i = 0uz
        while i < chars.size() {
            let char_ = chars[i]
            let next = next_char(&chars, current: i)
            if next != 0 {
                if (char_ > chars[next] and char_ - chars[next] == 32) or
                    (chars[next] > char_ and chars[next] - char_ == 32) {
                    chars[i] = 0
                    chars[next] = 0

                    i = previous_char(&chars, current: i)
                } else {
                    i = next
                }
            } else {
                ended = true
                break
            }
        }

        if ended {
            break
        }
    }
    
    println("{}", count_chars(&chars))
}